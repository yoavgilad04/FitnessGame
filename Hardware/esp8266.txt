#include <espnow.h>
#include <ESP8266WiFi.h>
#include <Adafruit_NeoPixel.h>  // for light
#ifdef __AVR__
#include <avr/power.h>  // Required for 16 MHz Adafruit Trinket
#endif
#define CHANNEL 1     // the ESP-NOW channel
#define PIN D4        // the neopixels pin 2 is for D4
#define NUMPIXELS 16  // need to be 16
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
clock_prescale_set(clock_div_1);
#endif
const byte buttonPin = D2;  // the number of the pushbutton pin - connect to D2 on the ESP8266
int buttonState = 0;        // variables will change to 1 when button is pushed.
bool reciv_is_on = false;
int my_number = 0;

enum GAMEstate {
  GAME1 = 1,
  GAME2,
  GAME3,
  GAME4,
  TRAINING,
  PAUSE,
  BLINK,
  TURN_OFF,
  NOT_DECIDED
};

GAMEstate state_of_game = NOT_DECIDED;
int n_to_blink = 0;
int p_to_blink = 0;
enum RGBColor {
  NO_COLOR = 0,
  RED = 1,  // Red
  GREEN,    // Green
  BLUE,     // Set the second pixel to blue
  BROWN,    // Set the first pixel to BROWN
  CYAN,     // Set the third pixel to Cyan
  WHITE,    // Set the fourth pixel to white
  ORANGE,   // Set the fifth pixel to orange
  PINK,     // Set the sixth pixel to pink
  PURPEL,   // Set the sixth pixel to purpel
};
RGBColor what_color_now = RED;
void turnPixelsOn(RGBColor color) {
  int choice = color;
  int r = 0, g = 0, b = 0;
  switch (choice) {
    case 1:  // Red
      r = 255;
      break;
    case 2:  // Green
      g = 255;
      break;
    case 3:  // BLUE
      b = 255;
      break;
    case 4:  // BROWN
      r = 200;
      g = 69;
      break;
    case 5:  // Cyan
      g = 255;
      b = 255;
      break;
    case 6:  // WHITE
      r = 255;
      g = 255;
      b = 255;
      break;
    case 7:  // ORANGE
      r = 255;
      g = 165;
      break;
    case 8:  // PINK
      r = 255;
      g = 105;
      b = 180;
      break;
    case 9:  // PURPEL
      r = 128;
      b = 128;
      break;
    default:
      Serial.println("Invalid choice.\n");
      break;
  }
  r = r / 2;
  g = g / 2;
  b = b / 2;
  for (int i = 0; i < NUMPIXELS; i++) {
    pixels.setPixelColor(i, pixels.Color(r, g, b));
    pixels.show();  // Send the updated pixel colors to the hardware.
  }
}
bool checkForChanges();

void turnPixelsOff() {
  for (int i = 0; i < NUMPIXELS; i++) {
    pixels.setPixelColor(i, pixels.Color(0, 0, 0));
    pixels.show();  // Send the updated pixel colors to the hardware.
  }
}
//flesh color for n times in peac p.
void fleshColor(RGBColor color, int n, int p) {
  if (p == 0) {
    return;
  }
  int del = 1000 / p;
  for (int i = 0; i < n; i++) {
    turnPixelsOn(color);
    if (checkForChanges() == true) break;
    delay(del / 2);
    turnPixelsOff();
    if (checkForChanges() == true) break;
    delay(del / 2);
  }
}

bool checkForChanges() {
  if (turn_off()) {
    turnPixelsOff();
    return true;
  }
  return false;
}


typedef struct {
  uint8_t peer_addr[6];  // Peer MAC address
  uint8_t channel;       // Communication channel
  uint8_t encrypt;       // Encryption enabled flag
  uint8_t reserved[13];  // Reserved for future use
} esp_now_peer_info_t;

enum esp_now_send_status_t {
  ESP_NOW_SEND_SUCCESS,     // Data sent successfully
  ESP_NOW_SEND_FAIL,        // Failed to send data
  ESP_NOW_SEND_QUEUE_FULL,  // The send queue is full, data could not be sent
  ESP_NOW_SEND_TIMEOUT      // The send operation timed out
};
typedef enum {
  ESP_OK = 0,                     // Operation succeeded
  ESP_FAIL = -1,                  // Operation failed
  ESP_ERR_NO_MEM = 0x101,         // Out of memory
  ESP_ERR_INVALID_ARG = 0x102,    // Invalid argument
  ESP_ERR_INVALID_STATE = 0x103,  // Invalid state
  // ... additional error codes
} esp_err_t;

void espnowErrorConnecetionLight() {
  fleshColor(RED, 9, 3);
}

// Init ESP Now with fallback
void InitESPNow() {
  WiFi.disconnect();
  if (esp_now_init() == 0 /*ESP_OK*/) {
    Serial.println("ESPNow Init Success");
  } else {
    Serial.println("ESPNow Init Failed");
    espnowErrorConnecetionLight();
    // Retry InitESPNow, add a counte and then restart?
    // InitESPNow();
    // or Simply Restart
    ESP.restart();
  }
}


// Check if the slave is already paired with the master.
// If not, pair the slave with master
uint8_t peer_addr[] = { 0x0C, 0xB8, 0x15, 0x77, 0x71, 0x39 };

uint8_t data_to_send[3] = { 0 };  // = my_number;
// send data
void sendData() {
  //data++;
  Serial.print("Sending: ");
  Serial.println(data_to_send[0]);

  esp_err_t result = (esp_err_t)esp_now_send(peer_addr, data_to_send, sizeof(data_to_send));
  Serial.print("Send Status: ");
  if (result == 0 /* ESP_OK*/) {
    Serial.println("Success");
  } else if (result == 1 /*ESP_ERR_ESPNOW_NOT_INIT*/) {
    // How did we get so far!!
    Serial.println("ESPNOW not Init.");
  } else if (result == 2 /*ESP_ERR_ESPNOW_ARG*/) {
    Serial.println("Invalid Argument");
  } else if (result == 3 /*ESP_ERR_ESPNOW_INTERNAL*/) {
    Serial.println("Internal Error");
  } else if (result == 4 /*ESP_ERR_ESPNOW_NO_MEM*/) {
    Serial.println("ESP_ERR_ESPNOW_NO_MEM");
  } else if (result == 5 /*ESP_ERR_ESPNOW_NOT_FOUND*/) {
    Serial.println("Peer not found.");
  } else {
    Serial.println("Not sure what happened");
    Serial.println(result);
  }
  //delay(100);
}

// callback when data is sent from Master to Slave
void OnDataSent(uint8_t *mac_addr, uint8_t status) {
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  Serial.print("Last Packet Sent to: ");
  Serial.println(macStr);
  Serial.print("Last Packet Send Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}
// callback when data is recv from Master
void OnDataRecv(uint8_t *mac_addr, uint8_t *data_recived, uint8_t data_len) {

  if ((data_recived[5]) == 1) { //esp32 say hello

      data_to_send[2] = 1; //IM HERE 
      esp_now_send(peer_addr, data_to_send, sizeof(data_to_send)); //AND THATS MY NAME

  } else {
    reciv_is_on = true;
    what_color_now = static_cast<enum RGBColor>(data_recived[1]);
    data_to_send[1] = static_cast<uint8_t>(data_recived[1]);
    n_to_blink = static_cast<int>(data_recived[2]);
    p_to_blink = static_cast<int>(data_recived[3]);
    data_to_send[0] = static_cast<uint8_t>(data_recived[4]);
    state_of_game = static_cast<enum GAMEstate>(data_recived[0]);
    data_to_send[2] = 0;


    char macStr[18];
    snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
             mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
    Serial.print("Last Packet Recv from: ");
    Serial.println(macStr);
    Serial.print("Last Packet Recv Data: ");
    Serial.println(data_recived[1]);
    Serial.println("");
  }
}

void setup() {
  //For communicating with Serial Monitor (in order to print something to the screen using serial monitor)
  Serial.begin(115200);
  pixels.begin();  // INITIALIZE NeoPixel strip object (REQUIRED)
  turnPixelsOff();
  pinMode(buttonPin, INPUT_PULLUP);

  fleshColor(GREEN, 3, 3);

  //Set device in AP and STA mode to begin the comunication
  WiFi.mode(WIFI_STA);

  Serial.println("ESPNow/bidirectional_esp8266");
  Serial.println("2");
  Serial.println("3");
  Serial.println("4");
  Serial.println("5");
  Serial.println("6");

  byte mac[6];
  // This is the mac address of the Master in Station Mode
  Serial.print("STA MAC: ");
  Serial.println(WiFi.macAddress());

  // Init ESPNow with a fallback logic
  InitESPNow();

  // Set the role to Controller (ESP8266)
  if (esp_now_set_self_role(ESP_NOW_ROLE_COMBO) != ESP_OK) {
    Serial.println("Error setting role");
    return;
  } else {
    Serial.println("esp_now iniial success");
  }

    uint8_t role = ESP_NOW_ROLE_SLAVE;  // ESP8266 is typically a slave
    uint8_t channel = 0;  // Use default Wi-Fi channel
    uint8_t *key = NULL;  // No encryption
    uint8_t key_len = 0;  // Length of key (0 since no encryption)

    if (esp_now_add_peer(peer_addr, role, channel, key, key_len) == 0) {
        Serial.println("New ESP32 added successfully!");

    } else {
        Serial.println("Failed to add ESP32.");
    }

  //  register functions
  esp_now_register_send_cb(OnDataSent);
  esp_now_register_recv_cb(OnDataRecv);
  Serial.println("Ready to send messages");
  WiFi.macAddress(mac);
  Serial.println(mac[3]);
  Serial.print("STA MAC: ");
}

bool printedFirstMessege = false;
void loop() {

  switch (state_of_game) {
    case 1:  // GAME1
      game();
      break;
    case 2:  // GAME2
      game();
      break;
    case 3:  // GAME3
      game();
      break;
    case 4:  // GAME4
      game();
      break;
    case 5:  // TRAINING
      game();
      break;
    case 6:                           //PAUSE
      while (state_of_game == PAUSE)  // ofek need to make sure that when he is resum the puse he send the correct game state again.
      {
        if (blink_light() || turn_off())
          return;

        yield();
      }
      state_of_game = NOT_DECIDED;
      break;
    case 7:  // BLINK
      Serial.println("BLINK");
      fleshColor(what_color_now, n_to_blink, p_to_blink);
      state_of_game = NOT_DECIDED;
      break;
    case 8:  // TURN_OFF
      Serial.println("TURN_OFF");
      turnPixelsOff();
      state_of_game = NOT_DECIDED;
      break;
    case 9:  // NOT_DECIDED

      if (printedFirstMessege == false) {
        Serial.println("NOT DECIDED");
        printedFirstMessege = true;
      }
      break;
    default:
      Serial.println("Invalid choice.");
      break;
  }
}

void game() {
  while (true) {
    if (reciv_is_on == true) {
      reciv_is_on = false;
      Serial.println("recive_on is false again");

      turnPixelsOn(what_color_now);

      Serial.println("COLOR:");
      Serial.println(what_color_now);
      Serial.println("color turned on");
      bool to_print = true;
      while (1) {
        if (blink_light() || turn_off())
          return;

        buttonState = digitalRead(buttonPin);
        if (buttonState == LOW) {
          fleshColor((state_of_game == TRAINING) ? GREEN : what_color_now, 3, 21);

          //the game will stop until you reales that button.
          bufferForButton();
          sendData();
          break;
        }

        if (state_of_game == PAUSE) {
          while (state_of_game == PAUSE)  // ofek need to make sure that when he is resum the puse he send the correct game state again.
          {
            if (blink_light() || turn_off())
              return;

            yield();
          }
        }
        yield();
      }
      break;
    }
    yield();
  }
  state_of_game = NOT_DECIDED;
}

void bufferForButton() {
  while (buttonState == LOW) {
    buttonState = digitalRead(buttonPin);
    if (blink_light() || turn_off())
      return;
    yield();
  }
}
bool blink_light() {
  if (state_of_game == BLINK) {
    turnPixelsOff();
    return true;
  }
  return false;
}
bool turn_off() {
  if (state_of_game == TURN_OFF) {
    return true;
  }
  return false;
}
